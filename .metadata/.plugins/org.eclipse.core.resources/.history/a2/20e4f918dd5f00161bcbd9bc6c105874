package birthcertificate.ews.soap;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.sound.midi.SysexMessage;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;
import org.springframework.stereotype.Service;

import bcmanager.system.SystemMessage;
import birthcertificate.entities.BCertificate;
import birthcertificate.entities.Labour;
import birthcertificate.services.BCService;

@Service
public class BEService implements IBEService {
	@Autowired
	private BCService service;

	@Override
	public List<CollectionStatus> applications() {
		List<CollectionStatus> collection = new ArrayList<CollectionStatus>();
		for (BCertificate cert : service.getAll()) {
			CollectionStatus status = new CollectionStatus();
			status.setParentId(Integer.parseInt(cert.getMaternalId()));
			status.setBcNumber(cert.getBcNumber());
			status.setStatus(cert.isCollectReady());
			status.setMessage(cert.isCollectReady() ? "Ready for collection"
					: "Not ready, Please contact your nearest breanch, if still not ready in the next 24 hours");
			collection.add(status);
		}
		return collection;
	}

	@Override
	public CollectionStatus checkStatus(int parentId) {
		CollectionStatus status = new CollectionStatus();
		boolean found = false;
		for (BCertificate cert : service.getAll()) {
			if (cert.getMaternalId().contains(parentId + "")) {
				found = true;
				status.setStatus(cert.isCollectReady());
				status.setParentId(parentId);
				status.setBcNumber(cert.getBcNumber());

			}
		}
		if (found) {
			if (status.isStatus()) {
				status.setMessage("Ready for collection");
			}
			else {
				status.setParentId(parentId);
				status.setMessage("Not ready, Please contact your nearest breanch, if still not ready in the next 24 hours");
			}
		} 
		else {
			status.setMessage("No application found with  the parent Id specified: "
					+ parentId);
		}
		return status;
	}

	@Override
	public SystemMessage createApplication(Labour labour) {
 		return service.createCerticate(labour);
	}

	@Override
	public List<BCertificate> approved() {
		List<BCertificate> list= new ArrayList<BCertificate>();
		try {
			for (BCertificate cert: service.getAll()){
				 if(cert.isCollectReady()){
					 list.add(cert);
				 }
			}
		} catch (Exception e) {
		 System.out.println("Ooops!! something went wrong! (:");
		}
		return list;
	}

	@Override
	public SystemMessage BatchApplication(Labour[] labourList) {
		 List<Labour> list = Arrays.asList(labourList);
		 SystemMessage message=service.batchApplications(list);
		return message;
	}

 
	 

}
