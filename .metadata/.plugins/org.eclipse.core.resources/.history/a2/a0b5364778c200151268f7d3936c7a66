package mbeans;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.Serializable;
import java.util.List;

import javax.ejb.EJB;
import javax.faces.bean.ManagedProperty;
import javax.faces.bean.SessionScoped;
import javax.faces.context.FacesContext;

import entities.FileInfo;
import entities.FileRequest;
import sessionBeans.FileService;

@javax.faces.bean.ManagedBean
@SessionScoped
public class NavController implements Serializable {
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	@EJB
	private FileService fileservice;
	private List<FileInfo> files;
	private List<FileRequest> fileRequests;

	public List<FileInfo> getFiles() {
		return files;
	}

	public void setFiles(List<FileInfo> files) {
		this.files = files;
	}

	public String browseFiles() {
		files = fileservice.getFiles("Lizo_Masikisiki");
		System.out.println("what :" + files.get(0).getFilePath());
		System.out.println("\n \n the size is " + files.size());
		return "listfiles";
	}

	public String showFile(String fileId) throws FileNotFoundException {
		System.out.println("file Id is:" + fileId);
		FileInfo fi = fileservice
				.getFileById("user3", Integer.parseInt(fileId));
		File f = new File("/home/lizo/Desktop/" + fi.getFileName() + ".pdf");
		FileOutputStream fos = new FileOutputStream(f.getAbsolutePath());
		System.out.println(f.getAbsolutePath());
		boolean dwn = fileservice.downloadFile(fi.getFilePath(),
				f.getAbsolutePath());
		return "index";
	}

	private String searchName;

	public String getSearchName() {
		return searchName;
	}

	public void setSearchName(String searchName) {
		this.searchName = searchName;
	}

	public String searchForFile() {
		if (searchName != null) {
			System.out.println("the search string is: " + searchName);
			boolean isBank = FacesContext.getCurrentInstance()
					.getExternalContext().isUserInRole("BANK");
			if (isBank) {
				files = fileservice.getFiles(searchName);
				System.out.println("The user is a member of Bank"
						+ files.size());
			}
		}
		return "search";
	}

	public String requestFile(String Id) {
		FileInfo fi = fileservice.getFileById("", Integer.parseInt(Id));
		FileRequest req = new FileRequest();
		req.setFile(fi);
		req.setReqFrom(FacesContext.getCurrentInstance().getExternalContext()
				.getRemoteUser());
		req.setReqTo(fi.getUploadedBy());
		System.out.println("Save Request Below for file :" + Id);
		fileservice.saveRequest(req);
		return "";
	}

	public List<FileRequest> getFileRequests() {
		return fileRequests;
	}

	public void setFileRequests(List<FileRequest> fileRequests) {
		this.fileRequests = fileRequests;
	}

	public String listRequest() {
		String user = FacesContext.getCurrentInstance().getExternalContext()
				.getRemoteUser();

		fileRequests = fileservice.getRequests(user);
		// listRequest.get(0).getFile().
		return "requests";
	}

	public String shareFile(String Id,String shareWith) {
		int fileId = Integer.parseInt(Id);
		FileInfo fi = fileservice.getFileById("", fileId);
		boolean fileShared=fileservice.shareFile(fi, shareWith);
		System.out.println("Successfully Shared!!!");
		return "";
	}
}
