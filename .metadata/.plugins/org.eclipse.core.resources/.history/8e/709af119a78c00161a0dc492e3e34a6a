package webFrameApp.mvcControllers;

import java.security.Principal;
import java.util.ArrayList;
import java.util.List;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.security.core.userdetails.User;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import webFrameApp.entites.Domain;
import webFrameApp.entites.FeedPost;
import webFrameApp.enumerations.DomainCategory;
import webFrameApp.enumerations.ListEnumerations;
import webFrameApp.serviceLgoic.DomainDAOImpl;
import webFrameApp.serviceLgoic.FeedPostImpl;
import webframe.sys.SystemMessage;

@Controller
public class HomeController {
	@Autowired
	private DomainDAOImpl domainService;
	@Autowired
	private FeedPostImpl service;

	@RequestMapping(value = "/", method = RequestMethod.GET)
	public ModelAndView homepage(HttpServletRequest request) {
		ModelAndView model = new ModelAndView("welcome");
		List<DomainCategory> domainCategories = new ArrayList<DomainCategory>();
		List<FeedPost> feeds = service.listPosts();
		for (DomainCategory c : DomainCategory.values()) {
			domainCategories.add(c);
		}
		model.addObject("categories", domainCategories);
		model.addObject("feeds", feeds);

		return model;
	}

	@RequestMapping(value = "username", method = RequestMethod.GET)
	public ModelAndView flagstaff(final HttpServletRequest request,
			Principal principal) {
		ModelAndView model = new ModelAndView("flagstaff");

		// model.addObject("userName",
		// request.getUserPrincipal().getName().toString());
		return model;

	}

	@RequestMapping(value = "home", method = RequestMethod.GET)
	public ModelAndView home() {

		List<Domain> d = domainService.getAllDomains();
		System.out.println("the size of domain list is:" + d.size());
		return new ModelAndView("home");

	}

	@RequestMapping(value = "getAllDomains", method = RequestMethod.POST, produces = "application/json")
	public @ResponseBody List<Domain> getAllDomainst(
			HttpServletRequest request, HttpServletResponse response) {

		return domainService.getAllDomains();

	}

	@RequestMapping(value = "createdomain", method = RequestMethod.GET)
	public ModelAndView createDomain(HttpServletRequest request,
			HttpServletResponse response) {
		Domain domain = new Domain();
		ModelAndView model = new ModelAndView("home");
		domain.setCreator(request.getParameter("domainCreator"));
		domain.setDomainName(request.getParameter("domainName"));
		domain.setOrgName(request.getParameter("domainOrg"));
		domain.setContactDetails(request.getParameter("contact"));
		domain.setCategory(request.getParameter("category"));
		domain.setDescription(request.getParameter("description"));
		if (isDomainModelValid(domain)) {
			SystemMessage sysResponse = domainService.createDomain(domain);
			if (!sysResponse.HasException() || sysResponse.isSucess()) {
				model.addObject("message", "sucess");
				model.addObject("domain", domain);
			} else {
				model.addObject("message", "Failed to create domain due to: "
						+ sysResponse.getMessages());
			}
		} else {
			model.addObject("message", "Invalid domain details supplied");
		}
		return model;
	}

	private boolean isDomainModelValid(Domain domain) {
		if (!domain.getCategory().isEmpty() && !domain.getCreator().isEmpty()
				&& !domain.getOrgName().isEmpty()
				&& !domain.getContactDetails().isEmpty()) {
			return true;
		} else {
			return false;
		}

	}
}
