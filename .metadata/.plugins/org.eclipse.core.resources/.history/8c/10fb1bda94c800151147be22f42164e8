package userGate.controllers;

import java.util.List;

import javax.naming.Name;
import javax.servlet.http.HttpServletRequest;
import javax.ws.rs.PathParam;

import userGate.classes.*;

import org.springframework.beans.factory.BeanFactory;
  
import org.springframework.context.ApplicationContext;
import org.springframework.context.support.ClassPathXmlApplicationContext;
import org.springframework.core.io.ClassPathResource;
import org.springframework.core.io.Resource;
import org.springframework.ldap.core.DistinguishedName;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.ui.ModelMap;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

 

@Controller
public class homeController {

	@RequestMapping("home/register")
	public String apply() {
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"classpath:META-INF/applicationContext.xml");
		BeanFactory factory = context;
		personInterface userService = (personInterface) factory.getBean("ldapUser");
		
		return "userform";
	}
	
	@RequestMapping("private/default")
	public ModelAndView privateaccess() {
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"classpath:META-INF/applicationContext.xml");
	 String user ="";
	 user= SecurityContextHolder.getContext().getAuthentication()
				.getName();
	 System.out.println("the user is ...."+user);
	 ModelAndView model=new ModelAndView("private");
		  model.addObject("user", user);
		return model;
	}
	@RequestMapping("private/profile/edit/{username}")
	public ModelAndView editprofile(@PathVariable String username) {
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"classpath:META-INF/applicationContext.xml");
		BeanFactory factory = context;
		personInterface userInterface= (personInterface) factory.getBean("ldapUser");
 
	 person psn=userInterface.findByUsername(username);
	 
	 
	 
	 ModelAndView model=new ModelAndView("edit");
	 
	  model.addObject("person",psn);
		return model;
	}
	@RequestMapping(value = "submit_appl", method = RequestMethod.GET)
	public String applic_submit(@ModelAttribute("userWeb") person person,
			ModelMap model) {

		model.addAttribute("last_name", person.getLast_name());
		model.addAttribute("first_name", person.getFirst_name());
		model.addAttribute("cell", person.getCell());
		model.addAttribute("email", person.getEmail());
		model.addAttribute("username", person.getUsername());
		model.addAttribute("password", person.getPassword());

		ApplicationContext context = new ClassPathXmlApplicationContext(
				"classpath:META-INF/applicationContext.xml");
		BeanFactory factory = context;
		personInterface create = (personInterface) factory.getBean("ldapUser");
		create.createPerson(person);

		return "applic_submit_success";
	}

	@RequestMapping(value = "showUsers", method = RequestMethod.GET)
	public ModelAndView showUsers(HttpServletRequest request) {
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"classpath:META-INF/applicationContext.xml");
		BeanFactory factory = context;
		personInterface personList = (personInterface) factory.getBean("ldapUser");
		List<person> people = personList.getPersons();
		
		System.out.println("security Context is :"+SecurityContextHolder.getContext().getAuthentication().getName());
		
		for (person p : people) {

			System.out.print(p.getFirst_name() + " ");
			System.out.print(p.getLast_name() + " ");
			System.out.println();
		}
		request.setAttribute("users", people);

		ModelAndView model = new ModelAndView("showAllusers");
		model.addObject("persons", people);
		return model;
	}

	@RequestMapping(value = "searches/{name}", method = RequestMethod.GET)
	public ModelAndView searches(@ModelAttribute("userWeb") person prsn,
			ModelMap modelmp, @PathVariable String name) {
		
		
		modelmp.addAttribute("last_name", prsn.getLast_name());
		ModelAndView model = new ModelAndView("search_results");
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"classpath:META-INF/applicationContext.xml");
		System.out.println("hahahahahah"+name);
		BeanFactory factory = context;
		personInterface findPerson = (personInterface) factory.getBean("ldapUser");
		List<person> persons = findPerson.findSomeone(name);
		model.addObject("found", persons);

		return model;
	}
	@RequestMapping(value = "search", method = RequestMethod.GET)
	public ModelAndView search(@ModelAttribute("userWeb") person prsn,
			ModelMap modelmp) {
		modelmp.addAttribute("last_name", prsn.getLast_name());
		ModelAndView model = new ModelAndView("search_results");
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"classpath:META-INF/applicationContext.xml");
		BeanFactory factory = context;
		personInterface findPerson = (personInterface) factory.getBean("ldapUser");
		List<person> persons = findPerson.findSomeone(prsn.getLast_name());
		model.addObject("found", persons);

		return model;
	}

	@RequestMapping(value = "selfUpdate")
	public ModelAndView selfUpdate(@ModelAttribute("userGate") person psn,
			ModelMap modelmp) {
		ModelAndView model = new ModelAndView("userUpdate");
		modelmp.addAttribute("last_name", psn.getLast_name());
		modelmp.addAttribute("first_name", psn.getFirst_name());
		modelmp.addAttribute("email", psn.getEmail());
		modelmp.addAttribute("cell", psn.getCell());

		ApplicationContext context = new ClassPathXmlApplicationContext(
				"classpath:META-INF/applicationContext.xml");
		BeanFactory factory = context;
		personInterface prsn = (personInterface) factory.getBean("ldapUser");
		prsn.updateUser(psn);
		return model;
	}

	// /////////////////////////////// Login
	// ///////////////////////////////////////////////////

	@RequestMapping(value = "loginRequest", method = RequestMethod.GET)
	public ModelAndView loginRequest() {
		ModelAndView model = new ModelAndView("login");
		return model;
	}

	// //////////////////////////////////////////////////////////////////////////////////////////////////
	@RequestMapping(value = "loginproces", method = RequestMethod.POST)
	public ModelAndView login(@ModelAttribute("userGate") person user,
			ModelMap modelmp) {

		modelmp.addAttribute("username", user.getUsername());
		modelmp.addAttribute("password", user.getPassword());

		ApplicationContext context = new ClassPathXmlApplicationContext(
				"classpath:META-INF/applicationContext.xml");
		BeanFactory factory = context;
		personInterface prsn = (personInterface) factory.getBean("ldapUser");

		boolean userFound = prsn.login(user.getUsername(), user.getPassword());

		ModelAndView model;

		person psn;
		String rs = "";
		if (userFound == true) {
			System.out.print("user Found");
			model = new ModelAndView("userProfile");
			psn = prsn.userProfile(user.getUsername());
			model.addObject("user", psn);

			return model;
		}

		else {
			System.out.print("user not Found");
			model = new ModelAndView("login");
			rs = "login Failure";
			model.addObject("results", rs);

			return model;
		}

	}

	@RequestMapping(value = "migrateUser")
	public ModelAndView migrateUser(@ModelAttribute("userGate") person p,
			ModelMap modelmp, HttpServletRequest request) {

		
		
		final String name;
		String full_name = request.getParameter("full_name");
		ModelAndView model;
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"classpath:META-INF/applicationContext.xml");
		BeanFactory factory = context;
		personInterface prsn = (personInterface) factory.getBean("ldapUser");

		
		
	
		
		
		List<person> requests = prsn.getPersons();
		
		if(full_name !=null){
			person newp = (prsn.findSomeone(full_name)).get(0);
			List list=prsn.getOrgUnit();
			 model= new ModelAndView("migrateUIprofile");
			 model.addObject("profile",newp);
			 model.addObject("ou",list);
		}
		else
		{
			 model= new ModelAndView("migrateUI");
			 model.addObject("requests", requests);
		}
		
		return model;
	}
	
	
	
	
	@RequestMapping(value = "migrateprocess")
	public ModelAndView migrateprocess(@ModelAttribute("userGate") person p,
			ModelMap modelmp, HttpServletRequest request) {
		
		modelmp.addAttribute("last_name",p.getLast_name());
		modelmp.addAttribute("first_name",p.getFirst_name());
		
		ModelAndView model;
		
		String oUnit=request.getParameter("orgUnit");
		
		ApplicationContext context = new ClassPathXmlApplicationContext(
				"classpath:META-INF/applicationContext.xml");
		BeanFactory factory = context;
		personInterface prsn = (personInterface) factory.getBean("ldapUser");
		
		//System.out.println("ADD "+prsn.addUserToGroup(p, "users"));
		System.out.println(" the role is \n"+prsn.findRole());
		
		//prsn.migrateUser(p, oUnit);
		
	
		model=new ModelAndView("migrateUIprofile");
		return model;
	}
	
	
	
	
	
	
	
	
	
	
}

